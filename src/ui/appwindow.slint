export struct ClientData {
    title: string,
    class: string,
    address: string,
    has_icon: bool,
    icon: image,
}

export component AppWindow inherits Window {
    no-frame: true;
    always-on-top: true;
    full-screen: true;
    background: transparent;
    in property <[ClientData]> clients;
    callback focus-window(string);

    Rectangle {
        width: parent.width;
        background: transparent;
        border-radius: 6px;
        Rectangle {
            padding: 6px;
            background: transparent;
            for client[index] in clients: Rectangle {
                width: 48px;
                height: 48px;
                x: index * 52px;
                y: parent.height - 120px - index * 42px;
                background: transparent;

                animate y {
                    duration: 150ms;
                    easing: ease-in-out;
                }

                drop-shadow-offset-x: 2px;
                drop-shadow-offset-y: 2px;
                drop-shadow-blur: 3px;
                drop-shadow-color: #00000066;
                property <bool> is-hovered: false;

                states [
                    hover-state when is-hovered: {
                        y: parent.height - 60px - index * 42px - 10px;
                    }
                ]
                TouchArea {
                    width: 100%;
                    height: 100%;
                    mouse-cursor: pointer;

                    pointer-event(event) => {
                        if (event.kind == PointerEventKind.up) {
                            parent.is-hovered = true;
                        }
                        if (event.kind == PointerEventKind.down) {
                            parent.is-hovered = false;
                        }
                    }
                    clicked => {
                        focus-window(client.address)
                    }
                }

                VerticalLayout {
                    alignment: center;
                    if client.has_icon: Image {
                        source: client.icon;
                        width: 48px;
                        height: 48px;
                    }
                    if !client.has_icon: Text {
                        text: client.class;
                        color: white;
                        font-size: 12px;
                        horizontal-alignment: center;
                    }
                }

                Rectangle {
                    opacity: parent.is-hovered ? 1 : 0;
                    y: parent.height + 4px;
                    background: transparent;
                    border-radius: 4px;
                    padding: 4px;
                    Text {
                        text: client.title;
                        color: white;
                        font-size: 12px;
                        horizontal-alignment: center;
                    }
                }
            }
        }
    }
}
